--- /go/src/github.com/eclipse/paho.mqtt.golang/net.go
+++ /go-fix/src/github.com/eclipse/paho.mqtt.golang/net.go
@@ -21,13 +21,11 @@
 	"net"
 	"net/http"
 	"net/url"
-	"os"
 	"reflect"
 	"sync/atomic"
 	"time"
 
 	"github.com/eclipse/paho.mqtt.golang/packets"
-	"golang.org/x/net/proxy"
 	"golang.org/x/net/websocket"
 )
 
@@ -59,17 +57,7 @@
 		conn.PayloadType = websocket.BinaryFrame
 		return conn, err
 	case "tcp":
-		allProxy := os.Getenv("all_proxy")
-		if len(allProxy) == 0 {
-			conn, err := net.DialTimeout("tcp", uri.Host, timeout)
-			if err != nil {
-				return nil, err
-			}
-			return conn, nil
-		}
-		proxyDialer := proxy.FromEnvironment()
-
-		conn, err := proxyDialer.Dial("tcp", uri.Host)
+		conn, err := net.DialTimeout("tcp", uri.Host, timeout)
 		if err != nil {
 			return nil, err
 		}
@@ -85,30 +73,11 @@
 	case "tls":
 		fallthrough
 	case "tcps":
-		allProxy := os.Getenv("all_proxy")
-		if len(allProxy) == 0 {
-			conn, err := tls.DialWithDialer(&net.Dialer{Timeout: timeout}, "tcp", uri.Host, tlsc)
-			if err != nil {
-				return nil, err
-			}
-			return conn, nil
-		}
-		proxyDialer := proxy.FromEnvironment()
-
-		conn, err := proxyDialer.Dial("tcp", uri.Host)
+		conn, err := tls.DialWithDialer(&net.Dialer{Timeout: timeout}, "tcp", uri.Host, tlsc)
 		if err != nil {
 			return nil, err
 		}
-
-		tlsConn := tls.Client(conn, tlsc)
-
-		err = tlsConn.Handshake()
-		if err != nil {
-			conn.Close()
-			return nil, err
-		}
-
-		return tlsConn, nil
+		return conn, nil
 	}
 	return nil, errors.New("Unknown protocol")
 }
--- /go/src/golang.org/x/net/proxy/socks5.go
+++ /go-fix/src/golang.org/x/net/proxy/socks5.go
@@ -5,7 +5,7 @@
 package proxy
 
 import (
-	"context"
+	"golang.org/x/net/context"
 	"net"
 
 	"golang.org/x/net/internal/socks"
